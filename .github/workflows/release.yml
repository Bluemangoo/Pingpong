name: Release

on:
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.commits[0].message, '+release') }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check git tag
        run: |
          version=$(grep version Cargo.toml -m 1 | cut -d'=' -f2 | tr -d "\r" | tr -d ' ' | tr -d '"' | tr -d "'")
          git rev-parse $version || exit 0
          exit 1
      - name: Generate release info
        run: |
          release_info=release.md
          echo "release_info=$release_info">>$GITHUB_ENV
          echo "## Commits" > $release_info
          number=$(git log --oneline $(git rev-parse `git describe --tags --abbrev=0`)..HEAD | wc -l)
          echo "$(git log --pretty='- [%h] %s' -$number)" >> $release_info
      - name: Upload release info
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: ${{ env.release_info }}
  build:
    runs-on: ${{ matrix.host_os }}
    if: ${{ contains(github.event.commits[0].message, '+release') }}
    needs: check
    strategy:
      matrix:
        target:
          - aarch64-apple-darwin
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - arm-unknown-linux-gnueabi
          - armv7-unknown-linux-musleabihf
          - i686-unknown-linux-gnu
          - i686-unknown-linux-musl
          - x86_64-apple-darwin
          - x86_64-unknown-linux-musl
          - x86_64-unknown-linux-gnu

        include:
          - target: aarch64-apple-darwin
            host_os: macos-latest

          - target: aarch64-unknown-linux-gnu
            host_os: ubuntu-latest
            architecture: arm64
            cross: true

          - target: aarch64-unknown-linux-musl
            host_os: ubuntu-latest
            cross: true

          - target: arm-unknown-linux-gnueabi
            host_os: ubuntu-latest
            architecture: arm
            cross: true

          - target: armv7-unknown-linux-musleabihf
            host_os: ubuntu-latest
            cross: true

          - target: i686-unknown-linux-gnu
            host_os: ubuntu-latest
            architecture: i386
            packages: "gcc-multilib libc6-dev-i386"

          - target: i686-unknown-linux-musl
            host_os: ubuntu-latest
            cross: true

          - target: x86_64-apple-darwin
            host_os: macos-latest

          - target: x86_64-unknown-linux-musl
            host_os: ubuntu-latest
            packages: "musl-tools"

          - target: x86_64-unknown-linux-gnu
            host_os: ubuntu-latest
            architecture: amd64
            packages: ""
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        if: ${{ contains(matrix.host_os, 'ubuntu') && !matrix.cross }}
        run: |
          sudo apt-get update -y
          sudo apt-get -yq --no-install-suggests --no-install-recommends install ${{ matrix.packages }}
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v0-rust-build-${{ matrix.target }}
          cache-all-crates: true
      - name: Install cross
        if: ${{ matrix.cross }}
        run: cargo install cross
      - name: Install targets
        if: ${{ !matrix.cross }}
        run: rustup target add ${{ matrix.target }}
      - name: Build
        if: ${{ !matrix.cross }}
        run: cargo build --release --target ${{ matrix.target }}
      - name: Cross build
        if: ${{ matrix.cross }}
        run: cross build --release --target ${{ matrix.target }}
      - name: Pack
        run: |
          mkdir target/pingpong || rm -rf target/pingpong/*
          mv target/${{ matrix.target }}/release/pingpong target/pingpong/pingpong
          cp -r config target/pingpong/config
          cd target/pingpong
          zip -r pingpong-${{ matrix.target }}.zip *
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: binary-pingpong-${{ matrix.target }}
          path: target/pingpong/pingpong-${{ matrix.target }}.zip
      - name: Get build info
        run: |
          version=$(grep version Cargo.toml -m 1 | cut -d'=' -f2 | tr -d "\r" | tr -d ' ' | tr -d '"' | tr -d "'")
          echo "version=$version">>$GITHUB_ENV
      - name: Download release info
        uses: actions/download-artifact@v4
        with:
          name: release-info
          path: .
          merge-multiple: true
      - name: Build deb
        if: ${{ contains(matrix.target, 'linux-gnu') && matrix.architecture }}
        run: |
          sudo apt install -y dpkg-dev
          mkdir target/deb || rm -rf target/deb/*
          mkdir -p target/deb/usr/bin
          mkdir -p target/deb/etc/pingpong
          mkdir -p target/deb/usr/share/doc/pingpong
          cp target/${{ matrix.target }}/release/pingpong target/deb/usr/bin/pingpong
          cp -r config/* target/deb/etc/pingpong
          gzip -c ../../release_info.md > usr/share/doc/pingpong/changelog.gz
          cd target/deb
          mkdir -p DEBIAN
          echo "Package: pingpong" > DEBIAN/control
          echo "Version: ${{ env.version }}" >> DEBIAN/control
          echo "Section: httpd" >> DEBIAN/control
          echo "Architecture: ${{ matrix.architecture }}" >> DEBIAN/control
          echo "Maintainer: Bluemangoo <chenfy2006@qq.com>" >> DEBIAN/control
          echo "Description: Reverse proxy powered by Pingora" >> DEBIAN/control
          echo " A simple and easy to use reverse proxy" >> DEBIAN/control
          echo "Homepage: https://github.com/Bluemangoo/Pingpong" >> DEBIAN/control
          echo "Depends: libc6" >> DEBIAN/control
          echo "Installed-Size: $(du -s usr | cut -f1)" >> DEBIAN/control
          echo "/etc/pingpong/pingpong.toml" > DEBIAN/conffiles
          echo "/etc/pingpong/server.toml" >> DEBIAN/conffiles
          echo "Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/" > DEBIAN/copyright
          echo "Source: https://github.com/Bluemangoo/Pingpong" >> DEBIAN/copyright
          echo "" >> DEBIAN/copyright
          echo "Files: *" >> DEBIAN/copyright
          echo "Copyright: 2024, Bluemangoo" >> DEBIAN/copyright
          echo "License: GPL-3" >> DEBIAN/copyright
          sed 's/^/ /' ../../LICENSE >> DEBIAN/copyright
          chmod 0644 etc/pingpong/*
          chmod 0644 usr/share/*
          chmod 0755 DEBIAN
          chmod 0644 DEBIAN/*
          cd ..
          dpkg-deb --build --root-owner-group deb pingpong-${{ matrix.architecture }}.deb
      - name: Upload deb
        if: ${{ contains(matrix.target, 'linux-gnu') && matrix.architecture }}
        uses: actions/upload-artifact@v4
        with:
          name: deb-pingpong-${{ matrix.architecture }}
          path: target/pingpong/pingpong-${{ matrix.architecture }}.deb

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.commits[0].message, '+release') }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*
          path: artifacts
          merge-multiple: true
      - name: Generate release info and tag
        run: |
          version=$(grep version Cargo.toml -m 1 | cut -d'=' -f2 | tr -d "\r" | tr -d ' ' | tr -d '"' | tr -d "'")
          echo "version=$version">>$GITHUB_ENV
          release_info=release.md
          echo "release_info=$release_info">>$GITHUB_ENV
          echo "## Commits" > $release_info
          number=$(git log --oneline $(git rev-parse `git describe --tags --abbrev=0`)..HEAD | wc -l)
          echo "$(git log --pretty='- [%h] %s' -$number)" >> $release_info
      - name: Create Release
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: artifacts/*
          bodyFile: ${{ env.release_info }}
          tag: ${{ env.version }}
          name: ${{ env.version }}
          makeLatest: true
